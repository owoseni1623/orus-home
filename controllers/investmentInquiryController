const ErrorResponse = require('../utils/errorResponse');
const asyncHandler = require('../middleware/async');
const InvestmentInquiry = require('../models/InvestmentInquiry');
const path = require('path');
const fs = require('fs').promises;

// @desc    Create new investment inquiry
// @route   POST /api/investment-inquiries
// @access  Public
exports.createInvestmentInquiry = asyncHandler(async (req, res, next) => {
  // Handle file uploads - the files will be available in req.files (handled by multer middleware)
  if (req.files && req.files.length > 0) {
    req.body.documents = req.files.map(file => file.filename);
  }

  const inquiry = await InvestmentInquiry.create(req.body);

  res.status(201).json({
    success: true,
    data: inquiry
  });
});

// @desc    Get all investment inquiries
// @route   GET /api/investment-inquiries
// @access  Private (Admin)
exports.getInvestmentInquiries = asyncHandler(async (req, res, next) => {
  const inquiries = await InvestmentInquiry.find().sort('-createdAt');

  res.status(200).json({
    success: true,
    count: inquiries.length,
    data: inquiries
  });
});

// @desc    Get single investment inquiry
// @route   GET /api/investment-inquiries/:id
// @access  Private (Admin)
exports.getInvestmentInquiry = asyncHandler(async (req, res, next) => {
  const inquiry = await InvestmentInquiry.findById(req.params.id);

  if (!inquiry) {
    return next(new ErrorResponse(`No inquiry found with id of ${req.params.id}`, 404));
  }

  res.status(200).json({
    success: true,
    data: inquiry
  });
});

// @desc    Update investment inquiry status
// @route   PUT /api/investment-inquiries/:id/status
// @access  Private (Admin)
exports.updateInquiryStatus = asyncHandler(async (req, res, next) => {
  const { status } = req.body;

  if (!['pending', 'reviewed', 'contacted', 'closed'].includes(status)) {
    return next(new ErrorResponse('Invalid status value', 400));
  }

  const inquiry = await InvestmentInquiry.findByIdAndUpdate(
    req.params.id,
    { status },
    { new: true, runValidators: true }
  );

  if (!inquiry) {
    return next(new ErrorResponse(`No inquiry found with id of ${req.params.id}`, 404));
  }

  res.status(200).json({
    success: true,
    data: inquiry
  });
});

// @desc    Respond to investment inquiry
// @route   PUT /api/investment-inquiries/:id/respond
// @access  Private (Admin)
exports.respondToInquiry = asyncHandler(async (req, res, next) => {
  const { text } = req.body;
  
  // Prepare admin response
  const adminResponse = {
    text,
    respondedAt: Date.now(),
    respondedBy: req.user.id
  };

  // Handle response images if they exist
  if (req.files && req.files.length > 0) {
    adminResponse.images = req.files.map(file => file.filename);
  }

  const inquiry = await InvestmentInquiry.findByIdAndUpdate(
    req.params.id,
    { 
      adminResponse,
      status: 'contacted' 
    },
    { new: true, runValidators: true }
  );

  if (!inquiry) {
    return next(new ErrorResponse(`No inquiry found with id of ${req.params.id}`, 404));
  }

  res.status(200).json({
    success: true,
    data: inquiry
  });
});

// @desc    Delete investment inquiry
// @route   DELETE /api/investment-inquiries/:id
// @access  Private (Admin)
exports.deleteInvestmentInquiry = asyncHandler(async (req, res, next) => {
  const inquiry = await InvestmentInquiry.findById(req.params.id);

  if (!inquiry) {
    return next(new ErrorResponse(`No inquiry found with id of ${req.params.id}`, 404));
  }

  // Delete associated files
  if (inquiry.documents && inquiry.documents.length > 0) {
    for (const doc of inquiry.documents) {
      try {
        await fs.unlink(path.join(__dirname, '../uploads/investment-inquiries', doc));
      } catch (err) {
        console.error(`Could not delete file ${doc}:`, err);
      }
    }
  }

  // Delete response images if they exist
  if (inquiry.adminResponse && inquiry.adminResponse.images && inquiry.adminResponse.images.length > 0) {
    for (const img of inquiry.adminResponse.images) {
      try {
        await fs.unlink(path.join(__dirname, '../uploads/investment-responses', img));
      } catch (err) {
        console.error(`Could not delete response image ${img}:`, err);
      }
    }
  }

  await inquiry.deleteOne();

  res.status(200).json({
    success: true,
    data: {}
  });
});